// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UniversalRepos.Datas;

namespace UniversalRepos.WebSite.Migrations
{
    [DbContext(typeof(AllReposContext))]
    [Migration("20190502171316_packages")]
    partial class packages
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0-preview4.19216.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("UniversalRepos.Datas.StorageEntities.PackageStorageEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pac_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnName("pac_author")
                        .HasMaxLength(512);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("pac_description")
                        .HasMaxLength(512);

                    b.Property<string>("License")
                        .HasColumnName("pac_license")
                        .HasMaxLength(1024);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("pac_name")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("PublicationDate")
                        .HasColumnName("pac_publication_date");

                    b.Property<int>("RepositoryId")
                        .HasColumnName("pac_rep_id");

                    b.Property<string>("Version")
                        .HasColumnName("pac_version")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("RepositoryId");

                    b.ToTable("TBL_PACKAGES");
                });

            modelBuilder.Entity("UniversalRepos.Datas.StorageEntities.PackageUrlStorageEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pur_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PackageId")
                        .HasColumnName("ppur_pac_id");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnName("pur_url")
                        .HasMaxLength(2147483647);

                    b.HasKey("Id");

                    b.HasIndex("PackageId");

                    b.ToTable("TBL_PACKAGES_URL");
                });

            modelBuilder.Entity("UniversalRepos.Datas.StorageEntities.RepositoryStorageEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rep_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("rep_description")
                        .HasMaxLength(512);

                    b.Property<bool?>("IsPublic")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rep_public")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("rep_name")
                        .HasMaxLength(255);

                    b.Property<int>("RepositoryTypeId")
                        .HasColumnName("rep_rty_id");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnName("rep_url")
                        .HasMaxLength(512);

                    b.HasKey("Id");

                    b.HasIndex("RepositoryTypeId");

                    b.ToTable("TBL_REPOSITORIES");
                });

            modelBuilder.Entity("UniversalRepos.Datas.StorageEntities.RepositoryTypeStorageEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rty_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("rty_description")
                        .HasMaxLength(512);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("rty_name")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("TBL_REPO_TYPE");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Repository des packages Nugets",
                            Name = "Nuget"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Repository de container Docker",
                            Name = "Docker Registry"
                        });
                });

            modelBuilder.Entity("UniversalRepos.Datas.StorageEntities.PackageStorageEntity", b =>
                {
                    b.HasOne("UniversalRepos.Datas.StorageEntities.RepositoryStorageEntity", "Repository")
                        .WithMany("Packages")
                        .HasForeignKey("RepositoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("UniversalRepos.Datas.StorageEntities.PackageUrlStorageEntity", b =>
                {
                    b.HasOne("UniversalRepos.Datas.StorageEntities.PackageStorageEntity", "Package")
                        .WithMany("UrlStorageEntities")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UniversalRepos.Datas.StorageEntities.RepositoryStorageEntity", b =>
                {
                    b.HasOne("UniversalRepos.Datas.StorageEntities.RepositoryTypeStorageEntity", "RepositoryType")
                        .WithMany("Repositories")
                        .HasForeignKey("RepositoryTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
