// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UniversalRepos.Datas;

namespace UniversalRepos.WebSite.Migrations
{
    [DbContext(typeof(AllReposContext))]
    [Migration("20190504101351_nugets")]
    partial class nugets
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0-preview4.19216.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("UniversalRepos.Datas.StorageEntities.NugetPackageStorageEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("pnu_id");

                    b.Property<string>("Authors")
                        .IsRequired()
                        .HasColumnName("pnu_authors");

                    b.Property<string>("Copyright")
                        .HasColumnName("pnu_copyright");

                    b.Property<string>("Dependencies")
                        .HasColumnName("pnu_depencies");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("pnu_description");

                    b.Property<bool>("DevelopmentDependency")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pnu_dev_depencies")
                        .HasDefaultValue(false);

                    b.Property<int>("DownloadCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pnu_download_count")
                        .HasDefaultValue(0);

                    b.Property<string>("IconUrl")
                        .HasColumnName("pnu_icon_url");

                    b.Property<bool>("IsAbsoluteLatestVersion")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pnu_absolute_latest")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsLatestVersion")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pnu_latest")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPrerelease")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pnu_pre_release")
                        .HasDefaultValue(false);

                    b.Property<string>("Language")
                        .HasColumnName("pnu_language");

                    b.Property<DateTime>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pnu_updated")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("LicenseUrl")
                        .HasColumnName("pnu_license_url");

                    b.Property<bool>("Listed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pnu_listed")
                        .HasDefaultValue(false);

                    b.Property<string>("MinClientVersion")
                        .HasColumnName("pnu_min_client_version");

                    b.Property<string>("NormalizedVersion")
                        .HasColumnName("pnu_normalized_version");

                    b.Property<string>("Owners")
                        .HasColumnName("pnu_owners");

                    b.Property<string>("PackageHash")
                        .HasColumnName("pnu_hash");

                    b.Property<string>("PackageHashAlgorithm")
                        .HasColumnName("pnu_hash_alogorithm");

                    b.Property<int>("PackageId")
                        .HasColumnName("pnu_id_pac_id");

                    b.Property<long>("PackageSize")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pnu_size")
                        .HasDefaultValue(0L);

                    b.Property<string>("ProjectUrl")
                        .HasColumnName("pnu_project_url");

                    b.Property<DateTime>("Published")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pnu_publication")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("ReleaseNotes")
                        .HasColumnName("pnu_release_notes");

                    b.Property<bool>("RequireLicenseAcceptance")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pnu_require_licence_acceptance")
                        .HasDefaultValue(true);

                    b.Property<string>("Summary")
                        .HasColumnName("pnu_summary");

                    b.Property<string>("Tags")
                        .HasColumnName("pnu_tags");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("pnu_title");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnName("pnu_version");

                    b.Property<int>("VersionDownloadCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pnu_downloaded_version")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("PackageId");

                    b.ToTable("TBL_PACKAGE_NUGET");
                });

            modelBuilder.Entity("UniversalRepos.Datas.StorageEntities.PackageStorageEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pac_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnName("pac_author")
                        .HasMaxLength(512);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("pac_description")
                        .HasMaxLength(512);

                    b.Property<string>("License")
                        .HasColumnName("pac_license")
                        .HasMaxLength(1024);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("pac_name")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("PublicationDate")
                        .HasColumnName("pac_publication_date");

                    b.Property<int>("RepositoryId")
                        .HasColumnName("pac_rep_id");

                    b.Property<string>("Version")
                        .HasColumnName("pac_version")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("RepositoryId");

                    b.ToTable("TBL_PACKAGES");
                });

            modelBuilder.Entity("UniversalRepos.Datas.StorageEntities.RepositoryStorageEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rep_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("rep_description")
                        .HasMaxLength(512);

                    b.Property<bool?>("IsPublic")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rep_public")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("rep_name")
                        .HasMaxLength(255);

                    b.Property<int>("RepositoryTypeId")
                        .HasColumnName("rep_rty_id");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnName("rep_url")
                        .HasMaxLength(512);

                    b.HasKey("Id");

                    b.HasIndex("RepositoryTypeId");

                    b.ToTable("TBL_REPOSITORIES");
                });

            modelBuilder.Entity("UniversalRepos.Datas.StorageEntities.RepositoryTypeStorageEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rty_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("rty_description")
                        .HasMaxLength(512);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("rty_name")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("TBL_REPO_TYPE");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Repository des packages Nugets",
                            Name = "Nuget"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Repository de container Docker",
                            Name = "Docker Registry"
                        });
                });

            modelBuilder.Entity("UniversalRepos.Datas.StorageEntities.NugetPackageStorageEntity", b =>
                {
                    b.HasOne("UniversalRepos.Datas.StorageEntities.PackageStorageEntity", "Package")
                        .WithMany()
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UniversalRepos.Datas.StorageEntities.PackageStorageEntity", b =>
                {
                    b.HasOne("UniversalRepos.Datas.StorageEntities.RepositoryStorageEntity", "Repository")
                        .WithMany("Packages")
                        .HasForeignKey("RepositoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("UniversalRepos.Datas.StorageEntities.RepositoryStorageEntity", b =>
                {
                    b.HasOne("UniversalRepos.Datas.StorageEntities.RepositoryTypeStorageEntity", "RepositoryType")
                        .WithMany("Repositories")
                        .HasForeignKey("RepositoryTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
